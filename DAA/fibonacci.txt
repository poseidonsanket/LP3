import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class Fibonacci_no {
    // Recursive Fibonacci Calculation
    public static long recfib(int n, long[] s) {
        s[0]++;
        if (n <= 1) return n;
        return recfib(n - 1, s) + recfib(n - 2, s);
    }

    // Non-Recursive Fibonacci Calculation
    public static long nonrecfib(int n, long[] s) {
        if (n <= 1) return n;
        long a = 0, b = 1, r = 0;
        for (int i = 2; i <= n; i++, s[0]++) {
            r = a + b;
            a = b;
            b = r;
        }
        return r;
    }

    // Generate a List of Fibonacci Numbers using Recursive Calculation
    public static List<Long> reclist(int n) {
        List<Long> f = new ArrayList<>();
        long[] s = {0};
        for (int i = 0; i < n; i++) {
            s[0] = 0;
            f.add(recfib(i, s));
        }
        return f;
    }

    // Generate a List of Fibonacci Numbers using Non-Recursive Calculation
    public static List<Long> nonreclist(int n) {
        List<Long> f = new ArrayList<>();
        long[] s = {0};
        for (int i = 0; i < n; i++) {
            s[0] = 0;
            f.add(nonrecfib(i, s));
        }
        return f;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter the number of Fibonacci numbers to generate: ");
        int count = sc.nextInt();
        List<Long> recursiveFibList = reclist(count);
        List<Long> nonRecursiveFibList = nonreclist(count);
        System.out.println("\nRecursive Fibonacci Numbers: " + recursiveFibList);
        System.out.println("\nNon-Recursive Fibonacci Numbers: " + nonRecursiveFibList);
        sc.close();
    }
}