import java.util.*;

// Item class to store value and weight
class Item {
    int value;
    int weight;

    // Constructor to initialize item with value and weight
    public Item(int value, int weight) {
        this.value = value;
        this.weight = weight;
    }
}

public class FractionalKnapsack {

    // Comparator to sort items by value/weight ratio
    static class ItemComparator implements Comparator<Item> {
        public int compare(Item a, Item b) {
            // Calculate value/weight ratio for both items
            double ratio1 = (double) a.value / a.weight;
            double ratio2 = (double) b.value / b.weight;
            
            // Compare the ratios
            if (ratio1 < ratio2) return 1;
            else if (ratio1 > ratio2) return -1;
            else return 0;
        }
    }

    // Method to solve the fractional knapsack problem
    public static double fractionalKnapsack(int W, List<Item> items) {
        // Sort items by value/weight ratio in descending order
        items.sort(new ItemComparator());

        double maxValue = 0.0;
        
        for (Item item : items) {
            // If the entire item can fit in the knapsack, take it
            if (W >= item.weight) {
                W -= item.weight;
                maxValue += item.value;
            } else {
                // Otherwise, take the fraction of the item
                maxValue += item.value * ((double) W / item.weight);
                break; // Knapsack is full
            }
        }
        return maxValue;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Input the number of items and the maximum weight of the knapsack
        System.out.print("Enter the number of items: ");
        int n = scanner.nextInt();
        System.out.print("Enter the maximum weight of the knapsack: ");
        int W = scanner.nextInt();

        List<Item> items = new ArrayList<>();

        // Input value and weight for each item
        System.out.println("Enter value and weight for each item:");
        for (int i = 0; i < n; i++) {
            System.out.print("Item " + (i + 1) + " - Value: ");
            int value = scanner.nextInt();
            System.out.print("Item " + (i + 1) + " - Weight: ");
            int weight = scanner.nextInt();
            items.add(new Item(value, weight));
        }

        // Calculate and print the maximum value that can be carried in the knapsack
        double maxValue = fractionalKnapsack(W, items);
        System.out.println("Maximum value in Knapsack = " + maxValue);

        scanner.close();
    }
}
