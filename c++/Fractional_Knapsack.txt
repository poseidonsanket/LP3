#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

// Item structure
struct Item {
    int weight;
    int value;

    Item(int value, int weight) : value(value), weight(weight) {}
};

// Comparator function to sort items by value/weight ratio
bool compare(Item a, Item b) {
    double ratio1 = (double)a.value / a.weight;
    double ratio2 = (double)b.value / b.weight;
    return ratio1 > ratio2;
}

double fractionalKnapsack(int W, vector<Item>& items) {
    // Sort items by value/weight ratio
    sort(items.begin(), items.end(), compare);

    double maxValue = 0.0;
    for (const Item& item : items) {
        if (W >= item.weight) {
            // Take the whole item
            W -= item.weight;
            maxValue += item.value;
        } else {
            // Take fraction of the item
            maxValue += W * ((double)item.value / item.weight);
            break;
        }
    }
    return maxValue;
}

int main() {
    int n, W;
    cout << "Enter the number of items: ";
    cin >> n;
    cout << "Enter the maximum weight of the knapsack: ";
    cin >> W;

    vector<Item> items;
    cout << "Enter value and weight for each item:\n";
    for (int i = 0; i < n; i++) {
        int value, weight;
        cout << "Item " << i + 1 << " - Value: ";
        cin >> value;
        cout << "Item " << i + 1 << " - Weight: ";
        cin >> weight;
        items.emplace_back(value, weight);
    }

    double maxValue = fractionalKnapsack(W, items);
    cout << "Maximum value in Knapsack = " << maxValue << endl;

    return 0;
}
