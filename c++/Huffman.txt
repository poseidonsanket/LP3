#include <iostream>
#include <vector>
#include <queue>
#include <unordered_map>

using namespace std;

// Node structure for the Huffman tree
struct HuffmanNode {
    char data;
    int freq;
    HuffmanNode *left, *right;

    // Constructor to initialize a Huffman node
    HuffmanNode(char data, int freq) {
        left = right = nullptr;
        this->data = data;
        this->freq = freq;
    }
};

// Comparator for the priority queue (min-heap), to order nodes by frequency
struct Compare {
    bool operator()(HuffmanNode* left, HuffmanNode* right) {
        return left->freq > right->freq; // Higher frequency has lower priority
    }
};

// Recursive function to generate and store the Huffman codes
void generateCodes(HuffmanNode* root, string str, unordered_map<char, string>& huffmanCode) {
    if (!root) return;

    // If it's a leaf node, it contains one of the input characters
    if (!root->left && !root->right) {
        huffmanCode[root->data] = str;
    }

    // Traverse the left and right children, adding "0" and "1" to the code respectively
    generateCodes(root->left, str + "0", huffmanCode);
    generateCodes(root->right, str + "1", huffmanCode);
}

// Function to build the Huffman Tree
HuffmanNode* buildHuffmanTree(vector<char>& chars, vector<int>& freqs) {
    // Priority queue (min-heap) to hold nodes sorted by frequency
    priority_queue<HuffmanNode*, vector<HuffmanNode*>, Compare> minHeap;

    // Create a leaf node for each character and add it to the min-heap
    for (size_t i = 0; i < chars.size(); i++) {
        minHeap.push(new HuffmanNode(chars[i], freqs[i]));
    }

    // Build the Huffman tree by repeatedly combining two lowest frequency nodes
    while (minHeap.size() > 1) {
        // Extract the two nodes with the lowest frequency
        HuffmanNode* left = minHeap.top(); minHeap.pop();
        HuffmanNode* right = minHeap.top(); minHeap.pop();

        // Create a new internal node with these two nodes as children
        // '$' is used as a placeholder for internal nodes
        int sum = left->freq + right->freq;
        HuffmanNode* node = new HuffmanNode('$', sum);
        node->left = left;
        node->right = right;

        // Add the new node back to the min-heap
        minHeap.push(node);
    }

    // The root of the Huffman tree is the only node left in the heap
    return minHeap.top();
}

int main() {
    int n;
    cout << "Enter the number of characters: ";
    cin >> n;

    vector<char> chars(n);
    vector<int> freqs(n);
    unordered_map<char, string> huffmanCode;

    // Input characters and their respective frequencies
    cout << "Enter characters and their frequencies:\n";
    for (int i = 0; i < n; i++) {
        cout << "Character " << i + 1 << ": ";
        cin >> chars[i];
        cout << "Frequency of " << chars[i] << ": ";
        cin >> freqs[i];
    }

    // Build the Huffman Tree
    HuffmanNode* root = buildHuffmanTree(chars, freqs);

    // Generate Huffman codes for each character
    generateCodes(root, "", huffmanCode);

    // Output the generated Huffman codes
    cout << "\nHuffman Codes:\n";
    for (const auto& pair : huffmanCode) {
        cout << pair.first << ": " << pair.second << endl;
    }

    return 0;
}
